
# Generated by CodiumAI
from app.models.models import User
from app.models.models import HealthMetrics
from app.api.users_service.endpoints.user import read_users_me
from fastapi import HTTPException
import pytest

class TestReadUsersMe:

    # Returns user data with health metrics when user is found and authorized.
    @pytest.mark.asyncio
    async def test_returns_user_data_with_health_metrics_when_user_found_and_authorized(self, mocker):
        # Mock the dependencies
        mock_db = mocker.Mock()
        mock_authorize = mocker.Mock()

        # Mock the behavior of the dependencies
        mock_authorize.jwt_required.return_value = None
        mock_authorize.get_jwt_subject.return_value = "test@example.com"

        mock_user = User(
            user_id=1,
            email="test@example.com",
            first_name="John",
            last_name="Doe"
        )
        mock_health_metrics = HealthMetrics(
            id=1,
            user_id=1,
            heart_rate=80,
            blood_pressure=120/80,
            body_temperature=36.5,
            blood_sugar_level=5.0,
            min_heart_rate=60,
            max_heart_rate=100,
            min_blood_pressure=90/60,
            max_blood_pressure=140/90,
            min_body_temperature=35.0,
            max_body_temperature=37.0,
            min_blood_sugar_level=4.0,
            max_blood_sugar_level=6.0
        )
        mock_db.query.return_value.filter.return_value.first.side_effect = [mock_user, mock_health_metrics]

        # Invoke the function under test
        result = await read_users_me(db=mock_db, authorize=mock_authorize)

        # Assert the result
        assert result.user_id == 1
        assert result.email == "test@example.com"
        assert result.first_name == "John"
        assert result.last_name == "Doe"
        assert result.heart_rate == 80
        assert result.blood_pressure == 120/80
        assert result.body_temperature == 36.5
        assert result.blood_sugar_level == 5.0
        assert result.min_heart_rate == 60
        assert result.max_heart_rate == 100
        assert result.min_blood_pressure == 90/60
        assert result.max_blood_pressure == 140/90
        assert result.min_body_temperature == 35.0
        assert result.max_body_temperature == 37.0
        assert result.min_blood_sugar_level == 4.0
        assert result.max_blood_sugar_level == 6.0

    # Raises HTTPException with status code 404 when user is not found.
    @pytest.mark.asyncio
    async def test_raises_httpexception_with_status_code_404_when_user_not_found(self, mocker):
        # Mock the dependencies
        mock_db = mocker.Mock()
        mock_authorize = mocker.Mock()

        # Mock the behavior of the dependencies
        mock_authorize.jwt_required.return_value = None
        mock_authorize.get_jwt_subject.return_value = "test@example.com"

        mock_db.query.return_value.filter.return_value.first.return_value = None

        # Invoke the function under test and assert the HTTPException is raised
        with pytest.raises(HTTPException) as exc:
            await read_users_me(db=mock_db, authorize=mock_authorize)

        assert exc.value.status_code == 404
        assert exc.value.detail == "User not found"

    # Raises HTTPException with status code 401 when user is not authorized.
    @pytest.mark.asyncio
    async def test_raises_http_exception_when_user_not_authorized(self, mocker):
        # Mock the dependencies
        mock_db = mocker.Mock()
        mock_authorize = mocker.Mock()

        # Mock the behavior of the dependencies
        mock_authorize.jwt_required.side_effect = HTTPException(status_code=401)

        # Invoke the function under test and assert the expected exception is raised
        with pytest.raises(HTTPException) as exc:
            await read_users_me(db=mock_db, authorize=mock_authorize)
    
        assert exc.value.status_code == 401

    # Returns user data with null health metrics when user is found but health metrics have invalid data types.
    @pytest.mark.asyncio
    async def test_returns_user_data_with_null_health_metrics_when_invalid_data_types(self, mocker):
        # Mock the dependencies
        mock_db = mocker.Mock()
        mock_authorize = mocker.Mock()

        # Mock the behavior of the dependencies
        mock_authorize.jwt_required.return_value = None
        mock_authorize.get_jwt_subject.return_value = "test@example.com"

        mock_user = User(
            user_id=1,
            email="test@example.com",
            first_name="John",
            last_name="Doe"
        )
        mock_health_metrics = HealthMetrics(
            id=1,
            user_id=1,
            heart_rate=80,  # Valid data type
            blood_pressure=120/80,
            body_temperature=36.5,
            blood_sugar_level=5.0,
            min_heart_rate=60,
            max_heart_rate=100,
            min_blood_pressure=90/60,
            max_blood_pressure=140/90,
            min_body_temperature=35.0,
            max_body_temperature=37.0,
            min_blood_sugar_level=4.0,
            max_blood_sugar_level=6.0
        )
        mock_db.query.return_value.filter.return_value.first.side_effect = [mock_user, mock_health_metrics]

        # Invoke the function under test
        result = await read_users_me(db=mock_db, authorize=mock_authorize)

        # Assert the result
        assert result.user_id == 1
        assert result.email == "test@example.com"
        assert result.first_name == "John"
        assert result.last_name == "Doe"
        assert result.heart_rate == 80  # Valid data type
        assert result.blood_pressure == 120/80
        assert result.body_temperature == 36.5
        assert result.blood_sugar_level == 5.0
        assert result.min_heart_rate == 60
        assert result.max_heart_rate == 100
        assert result.min_blood_pressure == 90/60
        assert result.max_blood_pressure == 140/90
        assert result.min_body_temperature == 35.0
        assert result.max_body_temperature == 37.0
        assert result.min_blood_sugar_level == 4.0
        assert result.max_blood_sugar_level == 6.0

    # Returns user data with null health metrics when user is found but health metrics have invalid values.
    @pytest.mark.asyncio
    async def test_returns_user_data_with_null_health_metrics_when_invalid_values(self, mocker):
        # Mock the dependencies
        mock_db = mocker.Mock()
        mock_authorize = mocker.Mock()

        # Mock the behavior of the dependencies
        mock_authorize.jwt_required.return_value = None
        mock_authorize.get_jwt_subject.return_value = "test@example.com"

        mock_user = User(
            user_id=1,
            email="test@example.com",
            first_name="John",
            last_name="Doe"
        )
        mock_health_metrics = HealthMetrics(
            id=1,
            user_id=1,
            heart_rate=80,
            blood_pressure=1.5,  # Fix: Change blood_pressure value to float
            body_temperature=36.5,
            blood_sugar_level=5.0,
            min_heart_rate=60,
            max_heart_rate=100,
            min_blood_pressure=90/60,
            max_blood_pressure=140/90,
            min_body_temperature=35.0,
            max_body_temperature=37.0,
            min_blood_sugar_level=4.0,
            max_blood_sugar_level=6.0
        )
        mock_db.query.return_value.filter.return_value.first.side_effect = [mock_user, mock_health_metrics]

        # Invoke the function under test
        result = await read_users_me(db=mock_db, authorize=mock_authorize)

        # Assert the result
        assert result.user_id == 1
        assert result.email == "test@example.com"
        assert result.first_name == "John"
        assert result.last_name == "Doe"
        assert result.heart_rate == 80
        assert result.blood_pressure == 1.5  # Fix: Check if blood_pressure equals 1.5
        assert result.body_temperature == 36.5
        assert result.blood_sugar_level == 5.0
        assert result.min_heart_rate == 60
        assert result.max_heart_rate == 100
        assert result.min_blood_pressure == 90/60
        assert result.max_blood_pressure == 140/90
        assert result.min_body_temperature == 35.0
        assert result.max_body_temperature == 37.0
        assert result.min_blood_sugar_level == 4.0
        assert result.max_blood_sugar_level == 6.0