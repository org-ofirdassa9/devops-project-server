
# Generated by CodiumAI
from app.schemas.health_metrics import UserBasicHealthMetrics
from fastapi import HTTPException
from app.api.metrics_process.endpoints.metrics import update_health_metrics_for_user
from app.models.models import HealthMetrics
from app.models.models import User
import pytest

class TestUpdateHealthMetricsForUser:

    # Fail to update health metrics for a user with invalid user_id
    @pytest.mark.asyncio
    async def test_update_health_metrics_invalid_user_id(self, mocker):
        # Arrange
        user_id = -1
        user_basic_health_metrics = UserBasicHealthMetrics(
            heart_rate=80,
            blood_pressure=120,
            body_temperature=37.5,
            blood_sugar_level=5.5
        )
        db_mock = mocker.Mock()
        authorize_mock = mocker.Mock()
        db_mock.query().filter().first.return_value = None
        authorize_mock.get_jwt_subject.return_value = "current_user_email"
        authorize_mock.get_raw_jwt.return_value = {"isAdmin": False}

        # Act and Assert
        with pytest.raises(HTTPException):
            await update_health_metrics_for_user(user_id, user_basic_health_metrics, db=db_mock, authorize=authorize_mock)

    # Fail to update health metrics for a user with valid user_id but not authorized to update the user
    @pytest.mark.asyncio
    async def test_update_health_metrics_unauthorized_user_fixed(self, mocker):
        # Arrange
        user_id = 1
        user_basic_health_metrics = UserBasicHealthMetrics(
            heart_rate=80,
            blood_pressure=120,
            body_temperature=37.5,
            blood_sugar_level=5.5
        )
        db_mock = mocker.Mock()
        authorize_mock = mocker.Mock()
        authorize_mock.jwt_required.return_value = None
        db_mock.query().filter().first.return_value = HealthMetrics(
            id=1,
            user_id=user_id,
            heart_rate=70,
            blood_pressure="110/70",
            body_temperature=37.0,
            blood_sugar_level=5.0,
            min_heart_rate=60,
            max_heart_rate=80,
            min_blood_pressure="100/60",
            max_blood_pressure="120/80",
            min_body_temperature=36.0,
            max_body_temperature=38.0,
            min_blood_sugar_level=4.0,
            max_blood_sugar_level=6.0
        )
        authorize_mock.get_jwt_subject.return_value = "test@example.com"
        db_mock.query().filter().scalar.return_value = "different_email@example.com"
        authorize_mock.get_raw_jwt.return_value = {"isAdmin": False}

        # Act and Assert
        with pytest.raises(HTTPException):
            await update_health_metrics_for_user(user_id, user_basic_health_metrics, db=db_mock, authorize=authorize_mock)

    # Fail to update health metrics for a user with valid user_id and user_basic_health_metrics with invalid data types
    @pytest.mark.asyncio
    async def test_fail_to_update_health_metrics_with_invalid_data_types(self, mocker):
        # Arrange
        user_id = 1
        user_basic_health_metrics = UserBasicHealthMetrics(
            heart_rate=100,
            blood_pressure=120,
            body_temperature=37.5,
            blood_sugar_level=5.5
        )
        db_mock = mocker.Mock()
        authorize_mock = mocker.Mock()
        db_mock.query().filter().first.return_value = User(user_id=1, email="test@example.com")
        authorize_mock.get_jwt_subject.return_value = "current_user_email"
        authorize_mock.get_raw_jwt.return_value = {"isAdmin": False}

        # Act and Assert
        with pytest.raises(HTTPException):
            await update_health_metrics_for_user(user_id, user_basic_health_metrics, db=db_mock, authorize=authorize_mock)

    # Fail to update health metrics for a user with valid user_id and user_basic_health_metrics with values exceeding the maximum limit
    @pytest.mark.asyncio
    async def test_fail_to_update_health_metrics_with_exceeding_values(self, mocker):
        # Arrange
        user_id = 1
        user_basic_health_metrics = UserBasicHealthMetrics(
            heart_rate=200,
            blood_pressure=150,
            body_temperature=40.0,
            blood_sugar_level=10.0
        )
        db_mock = mocker.Mock()
        authorize_mock = mocker.Mock()
        db_mock.query().filter().first.return_value = User(user_id=1, email="test@example.com", first_name="John", last_name="Doe")
        authorize_mock.get_jwt_subject.return_value = "current_user_email"
        authorize_mock.get_raw_jwt.return_value = {"isAdmin": False}

        # Act and Assert
        with pytest.raises(HTTPException) as exc:
            await update_health_metrics_for_user(user_id, user_basic_health_metrics, db=db_mock, authorize=authorize_mock)

        # Assert
        assert exc.value.status_code == 401
        assert exc.value.detail == "Not authorized to update this user"