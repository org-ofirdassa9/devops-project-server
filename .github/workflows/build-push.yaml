name: build-push

on:
  workflow_run:
    workflows: ["PyTest"]
    types:
      - completed

jobs:
  users-service:
    runs-on: ubuntu-latest
    needs: pytest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - name: Check PyTest result
        id: check-pytest
        run: echo "PyTest result is ${{ needs.pytest.result }}"
      
      - name: Build and push if PyTest succeeded
        if: steps.check-pytest.outputs.result == 'success'
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::476209828715:role/role-github-actions
          aws-region: "eu-west-1"
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "476209828715"
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{github.run_number}}

        run: |
          if [[ "$GITHUB_REF" == "refs/heads/stage" ]]; then
            # For stage branch, set image tag as 0.$IMAGE_TAG
            docker build -f users_service.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:users-service-0.$IMAGE_TAG" .
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:users-service-0.$IMAGE_TAG"
          elif [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            # For master branch, set image tag as 1.$IMAGE_TAG
            docker build -f users_service.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:users-service-1.$IMAGE_TAG" .
            docker tag "$ECR_REGISTRY/$ECR_REPOSITORY:1.$IMAGE_TAG" "$ECR_REGISTRY/$ECR_REPOSITORY:users-service-latest"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:users-service-1.$IMAGE_TAG"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:users-service-latest"
          else
            echo "Skipping image build for branch $GITHUB_REF"
            exit 0
          fi

  report-generator:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::476209828715:role/role-github-actions
          aws-region: "eu-west-1"
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "476209828715"
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{github.run_number}}

        run: |
          if [[ "$GITHUB_REF" == "refs/heads/stage" ]]; then
            # For stage branch, set image tag as 0.$IMAGE_TAG
            docker build -f report_generator.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:report-generator-0.$IMAGE_TAG" .
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:report-generator-0.$IMAGE_TAG"
          elif [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            # For master branch, set image tag as 1.$IMAGE_TAG
            docker build -f report_generator.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:report-generator-1.$IMAGE_TAG" .
            docker tag "$ECR_REGISTRY/$ECR_REPOSITORY:1.$IMAGE_TAG" "$ECR_REGISTRY/$ECR_REPOSITORY:report-generator-latest"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:report-generator-1.$IMAGE_TAG"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:report-generator-latest"
          else
            echo "Skipping image build for branch $GITHUB_REF"
            exit 0
          fi

  metrics-process:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::476209828715:role/role-github-actions
          aws-region: "eu-west-1"
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "476209828715"
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{github.run_number}}

        run: |
          if [[ "$GITHUB_REF" == "refs/heads/stage" ]]; then
            # For stage branch, set image tag as 0.$IMAGE_TAG
            docker build -f metrics_process.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:metrics-process-0.$IMAGE_TAG" .
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:metrics-process-0.$IMAGE_TAG"
          elif [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            # For master branch, set image tag as 1.$IMAGE_TAG
            docker build -f metrics_process.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:metrics-process-1.$IMAGE_TAG" .
            docker tag "$ECR_REGISTRY/$ECR_REPOSITORY:1.$IMAGE_TAG" "$ECR_REGISTRY/$ECR_REPOSITORY:metrics-process-latest"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:metrics-process-1.$IMAGE_TAG"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:metrics-process-latest"
          else
            echo "Skipping image build for branch $GITHUB_REF"
            exit 0
          fi

  init:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::476209828715:role/role-github-actions
          aws-region: "eu-west-1"
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "476209828715"
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{github.run_number}}

        run: |
          if [[ "$GITHUB_REF" == "refs/heads/stage" ]]; then
            # For stage branch, set image tag as 0.$IMAGE_TAG
            docker build -f init.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:init-0.$IMAGE_TAG" .
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:init-0.$IMAGE_TAG"
          elif [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            # For master branch, set image tag as 1.$IMAGE_TAG
            docker build -f init.Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:init-1.$IMAGE_TAG" .
            docker tag "$ECR_REGISTRY/$ECR_REPOSITORY:1.$IMAGE_TAG" "$ECR_REGISTRY/$ECR_REPOSITORY:init-latest"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:init-1.$IMAGE_TAG"
            docker push "$ECR_REGISTRY/$ECR_REPOSITORY:init-latest"
          else
            echo "Skipping image build for branch $GITHUB_REF"
            exit 0
          fi